using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace ShipStation.Models
{
    public class ShipStationOrder
    {
        /// <summary>
        /// A user-defined order number used to identify an order.
        /// string, required, max-length: 50
        /// </summary>
        [JsonProperty("orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// A user-provided key that should be unique to each order.
        /// If an orderKey is not provided, ShipStation will create a new order and generate a unique orderKey for that order.
        /// If the orderKey is provided, the createorder method will either: create a new order if the provided orderKey is not found,
        /// or, update the existing order if the orderKey is found.
        /// string, optional
        /// </summary>
        [JsonProperty("orderKey")]
        public string OrderKey { get; set; }

        /// <summary>
        /// The date the order was placed.
        /// string, required
        /// </summary>
        [JsonProperty("orderDate")]
        public string OrderDate { get; set; }

        /// <summary>
        /// The date the order was paid for.
        /// string, optional
        /// </summary>
        [JsonProperty("paymentDate")]
        public string PaymentDate { get; set; }

        /// <summary>
        /// The date the order is to be shipped before or on.
        /// This field is a suggested value generated by the order source/platform/cart and passed to ShipStation.
        /// string, optional
        /// </summary>
        [JsonProperty("shipByDate")]
        public string ShipByDate { get; set; }

        /// <summary>
        /// The order's status. Possible values: awaiting_payment, awaiting_shipment, shipped, on_hold, cancelled
        /// string, required
        /// </summary>
        [JsonProperty("orderStatus")]
        public string OrderStatus { get; set; }

        [JsonProperty("customerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// The customer's username. Note: This property needs to be defined in order to generate a customer profile
        /// string, optional
        /// </summary>
        [JsonProperty("customerUsername")]
        public string CustomerUsername { get; set; }

        /// <summary>
        /// The customer's email address.
        /// string, optional
        /// </summary>
        [JsonProperty("customerEmail")]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// The recipients billing address. Use the Address model.
        /// Address, required
        /// </summary>
        [JsonProperty("billTo")]
        public ToAddress BillTo { get; set; }

        /// <summary>
        /// The recipient's shipping address. Use the Address model.
        /// Address, required
        /// </summary>
        [JsonProperty("shipTo")]
        public ToAddress ShipTo { get; set; }

        /// <summary>
        /// An array of item objects. Use an array of OrderItem models.
        /// OrderItem, optional
        /// </summary>
        [JsonProperty("items")]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// The total amount paid for the Order.
        /// number, optional
        /// </summary>
        [JsonProperty("amountPaid")]
        public double AmountPaid { get; set; }

        /// <summary>
        /// The total tax amount for the Order.
        /// number, optional
        /// </summary>
        [JsonProperty("taxAmount")]
        public double TaxAmount { get; set; }

        /// <summary>
        /// Shipping amount paid by the customer, if any.
        /// number, optional
        /// </summary>
        [JsonProperty("shippingAmount")]
        public double ShippingAmount { get; set; }

        /// <summary>
        /// Notes left by the customer when placing the order.
        /// string, optional
        /// </summary>
        [JsonProperty("customerNotes")]
        public string CustomerNotes { get; set; }

        /// <summary>
        /// Private notes that are only visible to the seller.
        /// string, optional
        /// </summary>
        [JsonProperty("internalNotes")]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Specifies whether or not this Order is a gift
        /// boolean, optional
        /// </summary>
        [JsonProperty("gift")]
        public bool? Gift { get; set; }

        /// <summary>
        /// Gift message left by the customer when placing the order.
        /// string, optional
        /// </summary>
        [JsonProperty("giftMessage")]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Method of payment used by the customer.
        /// string, optional
        /// </summary>
        [JsonProperty("paymentMethod")]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Identifies the shipping service selected by the customer when placing this order.
        /// This value is given to ShipStation by the marketplace/cart and helps identify
        /// what shipping service the customer selected upon checkout.
        /// string, optional
        /// </summary>
        [JsonProperty("requestedShippingService")]
        public string RequestedShippingService { get; set; }

        /// <summary>
        /// The code for the carrier that is to be used(or was used) when this order is shipped(was shipped).
        /// string, optional
        /// </summary>
        [JsonProperty("carrierCode")]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The code for the shipping service that is to be used(or was used) when this order is shipped(was shipped).
        /// string, optional
        /// </summary>
        [JsonProperty("serviceCode")]
        public string ServiceCode { get; set; }

        /// <summary>
        /// The code for the package type that is to be used(or was used) when this order is shipped(was shipped).
        /// string, optional
        /// </summary>
        [JsonProperty("packageCode")]
        public string PackageCode { get; set; }

        /// <summary>
        /// The type of delivery confirmation that is to be used(or was used) when this order is shipped(was shipped).
        /// Possible values: none, delivery, signature, adult_signature, and direct_signature. direct_signature is available for FedEx only.
        /// string, optional
        /// </summary>
        [JsonProperty("confirmation")]
        public string Confirmation { get; set; }

        /// <summary>
        /// The date the order was shipped.
        /// string, optional
        /// </summary>
        [JsonProperty("shipDate")]
        public string ShipDate { get; set; }

        /// <summary>
        /// Weight of the order. Use the Weight model.
        /// Weight, optional
        /// </summary>
        [JsonProperty("weight")]
        public Weight Weight { get; set; }

        /// <summary>
        /// Dimensions of the order. Use the Dimensions model.
        /// Dimensions, optional
        /// </summary>
        [JsonProperty("dimensions")]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The shipping insurance information associated with this order. Use the InsuranceOptions model.
        /// InsuranceOptions, optional
        /// </summary>
        [JsonProperty("insuranceOptions")]
        public InsuranceOptions InsuranceOptions { get; set; }

        /// <summary>
        /// Customs information that can be used to generate customs documents for international orders. Use the InternationalOptions model.
        /// InternationalOptions, optional
        /// </summary>
        [JsonProperty("internationalOptions")]
        public InternationalOptions InternationalOptions { get; set; }

        /// <summary>
        /// Various advanced options that may be available depending on the shipping carrier that is used to ship the order. Use the AdvancedOptions model.
        /// AdvancedOptions, optional
        /// </summary>
        [JsonProperty("advancedOptions")]
        public AdvancedOptions AdvancedOptions { get; set; }

        /// <summary>
        /// Array of tagIds. Each tagId identifies a tag that has been associated with this order.
        /// number[]
        /// </summary>
        [JsonProperty("tagIds")]
        public List<long> TagIds { get; set; }
    }

    public class AdvancedOptions
    {
        [JsonProperty("warehouseId")]
        public long WarehouseId { get; set; }

        [JsonProperty("nonMachinable")]
        public bool NonMachinable { get; set; }

        [JsonProperty("saturdayDelivery")]
        public bool SaturdayDelivery { get; set; }

        [JsonProperty("containsAlcohol")]
        public bool ContainsAlcohol { get; set; }

        [JsonProperty("mergedOrSplit")]
        public bool MergedOrSplit { get; set; }

        [JsonProperty("mergedIds")]
        public List<object> MergedIds { get; set; }

        [JsonProperty("parentId")]
        public object ParentId { get; set; }

        [JsonProperty("storeId")]
        public long StoreId { get; set; }

        [JsonProperty("customField1")]
        public string CustomField1 { get; set; }

        [JsonProperty("customField2")]
        public string CustomField2 { get; set; }

        [JsonProperty("customField3")]
        public Uri CustomField3 { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("billToParty")]
        public object BillToParty { get; set; }

        [JsonProperty("billToAccount")]
        public object BillToAccount { get; set; }

        [JsonProperty("billToPostalCode")]
        public object BillToPostalCode { get; set; }

        [JsonProperty("billToCountryCode")]
        public object BillToCountryCode { get; set; }
    }

    public class ToAddress
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("company")]
        public string Company { get; set; }

        [JsonProperty("street1")]
        public string Street1 { get; set; }

        [JsonProperty("street2")]
        public string Street2 { get; set; }

        [JsonProperty("street3")]
        public object Street3 { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("postalCode")]
        public string PostalCode { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("phone")]
        public string Phone { get; set; }

        [JsonProperty("residential")]
        public bool? Residential { get; set; }
    }

    public class Dimensions
    {
        [JsonProperty("units")]
        public string Units { get; set; }

        [JsonProperty("length")]
        public long Length { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public class InsuranceOptions
    {
        [JsonProperty("provider")]
        public string Provider { get; set; }

        [JsonProperty("insureShipment")]
        public bool InsureShipment { get; set; }

        [JsonProperty("insuredValue")]
        public long InsuredValue { get; set; }
    }

    public class InternationalOptions
    {
        [JsonProperty("contents")]
        public object Contents { get; set; }

        [JsonProperty("customsItems")]
        public object CustomsItems { get; set; }
    }

    public class OrderItem
    {
        [JsonProperty("lineItemKey")]
        public string LineItemKey { get; set; }

        [JsonProperty("sku")]
        public string Sku { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("imageUrl")]
        public object ImageUrl { get; set; }

        [JsonProperty("weight")]
        public Weight Weight { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }

        [JsonProperty("unitPrice")]
        public double UnitPrice { get; set; }

        [JsonProperty("taxAmount")]
        public double? TaxAmount { get; set; }

        [JsonProperty("shippingAmount")]
        public double? ShippingAmount { get; set; }

        [JsonProperty("warehouseLocation")]
        public string WarehouseLocation { get; set; }

        [JsonProperty("options")]
        public List<Option> Options { get; set; }

        [JsonProperty("productId")]
        public string ProductId { get; set; }

        [JsonProperty("fulfillmentSku")]
        public string FulfillmentSku { get; set; }

        [JsonProperty("adjustment")]
        public bool Adjustment { get; set; }

        [JsonProperty("upc")]
        public string Upc { get; set; }
    }

    public class Option
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public class Weight
    {
        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("units")]
        public string Units { get; set; }
    }
}
